#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def query(self, sql, fullText, fromTime, toTime, isProcessTime, userid):
    """
    Parameters:
     - sql
     - fullText
     - fromTime
     - toTime
     - isProcessTime
     - userid
    """
    pass

  def queryByOffLine(self, taskInfo):
    """
    Parameters:
     - taskInfo
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def query(self, sql, fullText, fromTime, toTime, isProcessTime, userid):
    """
    Parameters:
     - sql
     - fullText
     - fromTime
     - toTime
     - isProcessTime
     - userid
    """
    self.send_query(sql, fullText, fromTime, toTime, isProcessTime, userid)
    return self.recv_query()

  def send_query(self, sql, fullText, fromTime, toTime, isProcessTime, userid):
    self._oprot.writeMessageBegin('query', TMessageType.CALL, self._seqid)
    args = query_args()
    args.sql = sql
    args.fullText = fullText
    args.fromTime = fromTime
    args.toTime = toTime
    args.isProcessTime = isProcessTime
    args.userid = userid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_query(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = query_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    if result.nre is not None:
      raise result.nre
    raise TApplicationException(TApplicationException.MISSING_RESULT, "query failed: unknown result");

  def queryByOffLine(self, taskInfo):
    """
    Parameters:
     - taskInfo
    """
    self.send_queryByOffLine(taskInfo)
    return self.recv_queryByOffLine()

  def send_queryByOffLine(self, taskInfo):
    self._oprot.writeMessageBegin('queryByOffLine', TMessageType.CALL, self._seqid)
    args = queryByOffLine_args()
    args.taskInfo = taskInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryByOffLine(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryByOffLine_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    if result.nre is not None:
      raise result.nre
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryByOffLine failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["query"] = Processor.process_query
    self._processMap["queryByOffLine"] = Processor.process_queryByOffLine

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_query(self, seqid, iprot, oprot):
    args = query_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = query_result()
    try:
      result.success = self._handler.query(args.sql, args.fullText, args.fromTime, args.toTime, args.isProcessTime, args.userid)
    except Exception.ttypes.RException, e:
      result.e = e
    except Exception.ttypes.RNoResourceException, nre:
      result.nre = nre
    oprot.writeMessageBegin("query", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryByOffLine(self, seqid, iprot, oprot):
    args = queryByOffLine_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryByOffLine_result()
    try:
      result.success = self._handler.queryByOffLine(args.taskInfo)
    except Exception.ttypes.RException, e:
      result.e = e
    except Exception.ttypes.RNoResourceException, nre:
      result.nre = nre
    oprot.writeMessageBegin("queryByOffLine", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class query_args:
  """
  Attributes:
   - sql
   - fullText
   - fromTime
   - toTime
   - isProcessTime
   - userid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sql', None, None, ), # 1
    (2, TType.STRING, 'fullText', None, None, ), # 2
    (3, TType.I64, 'fromTime', None, None, ), # 3
    (4, TType.I64, 'toTime', None, None, ), # 4
    (5, TType.BOOL, 'isProcessTime', None, None, ), # 5
    (6, TType.STRING, 'userid', None, None, ), # 6
  )

  def __init__(self, sql=None, fullText=None, fromTime=None, toTime=None, isProcessTime=None, userid=None,):
    self.sql = sql
    self.fullText = fullText
    self.fromTime = fromTime
    self.toTime = toTime
    self.isProcessTime = isProcessTime
    self.userid = userid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sql = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.fullText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.fromTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.toTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.isProcessTime = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.userid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('query_args')
    if self.sql is not None:
      oprot.writeFieldBegin('sql', TType.STRING, 1)
      oprot.writeString(self.sql)
      oprot.writeFieldEnd()
    if self.fullText is not None:
      oprot.writeFieldBegin('fullText', TType.STRING, 2)
      oprot.writeString(self.fullText)
      oprot.writeFieldEnd()
    if self.fromTime is not None:
      oprot.writeFieldBegin('fromTime', TType.I64, 3)
      oprot.writeI64(self.fromTime)
      oprot.writeFieldEnd()
    if self.toTime is not None:
      oprot.writeFieldBegin('toTime', TType.I64, 4)
      oprot.writeI64(self.toTime)
      oprot.writeFieldEnd()
    if self.isProcessTime is not None:
      oprot.writeFieldBegin('isProcessTime', TType.BOOL, 5)
      oprot.writeBool(self.isProcessTime)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 6)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sql)
    value = (value * 31) ^ hash(self.fullText)
    value = (value * 31) ^ hash(self.fromTime)
    value = (value * 31) ^ hash(self.toTime)
    value = (value * 31) ^ hash(self.isProcessTime)
    value = (value * 31) ^ hash(self.userid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class query_result:
  """
  Attributes:
   - success
   - e
   - nre
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (RStructType.ttypes.RQueryResultModel, RStructType.ttypes.RQueryResultModel.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'e', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'nre', (Exception.ttypes.RNoResourceException, Exception.ttypes.RNoResourceException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, e=None, nre=None,):
    self.success = success
    self.e = e
    self.nre = nre

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = RStructType.ttypes.RQueryResultModel()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.e = Exception.ttypes.RException()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.nre = Exception.ttypes.RNoResourceException()
          self.nre.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('query_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.e is not None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    if self.nre is not None:
      oprot.writeFieldBegin('nre', TType.STRUCT, 2)
      self.nre.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.e)
    value = (value * 31) ^ hash(self.nre)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryByOffLine_args:
  """
  Attributes:
   - taskInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'taskInfo', (RStructType.ttypes.ROfflineTaskInfo, RStructType.ttypes.ROfflineTaskInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, taskInfo=None,):
    self.taskInfo = taskInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.taskInfo = RStructType.ttypes.ROfflineTaskInfo()
          self.taskInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryByOffLine_args')
    if self.taskInfo is not None:
      oprot.writeFieldBegin('taskInfo', TType.STRUCT, 1)
      self.taskInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryByOffLine_result:
  """
  Attributes:
   - success
   - e
   - nre
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'e', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'nre', (Exception.ttypes.RNoResourceException, Exception.ttypes.RNoResourceException.thrift_spec), None, ), # 2
  )

  def __init__(self, success=None, e=None, nre=None,):
    self.success = success
    self.e = e
    self.nre = nre

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.e = Exception.ttypes.RException()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.nre = Exception.ttypes.RNoResourceException()
          self.nre.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryByOffLine_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.e is not None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    if self.nre is not None:
      oprot.writeFieldBegin('nre', TType.STRUCT, 2)
      self.nre.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.e)
    value = (value * 31) ^ hash(self.nre)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
