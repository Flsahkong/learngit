#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import RTypeEnum.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class RStructTypeModel:
  """
  Attributes:
   - fieldName
   - fieldType
   - allowNull
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fieldName', None, None, ), # 1
    (2, TType.I32, 'fieldType', None, None, ), # 2
    (3, TType.BOOL, 'allowNull', None, None, ), # 3
  )

  def __init__(self, fieldName=None, fieldType=None, allowNull=None,):
    self.fieldName = fieldName
    self.fieldType = fieldType
    self.allowNull = allowNull

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fieldName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.fieldType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.allowNull = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RStructTypeModel')
    if self.fieldName is not None:
      oprot.writeFieldBegin('fieldName', TType.STRING, 1)
      oprot.writeString(self.fieldName)
      oprot.writeFieldEnd()
    if self.fieldType is not None:
      oprot.writeFieldBegin('fieldType', TType.I32, 2)
      oprot.writeI32(self.fieldType)
      oprot.writeFieldEnd()
    if self.allowNull is not None:
      oprot.writeFieldBegin('allowNull', TType.BOOL, 3)
      oprot.writeBool(self.allowNull)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fieldName)
    value = (value * 31) ^ hash(self.fieldType)
    value = (value * 31) ^ hash(self.allowNull)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RDataCellModel:
  """
  Attributes:
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'data', None, None, ), # 1
  )

  def __init__(self, data=None,):
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RDataCellModel')
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 1)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RQueryResultModel:
  """
  Attributes:
   - dataList
   - fieldTypeList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'dataList', (TType.LIST,(TType.STRUCT,(RDataCellModel, RDataCellModel.thrift_spec))), None, ), # 1
    (2, TType.LIST, 'fieldTypeList', (TType.STRUCT,(RStructTypeModel, RStructTypeModel.thrift_spec)), None, ), # 2
  )

  def __init__(self, dataList=None, fieldTypeList=None,):
    self.dataList = dataList
    self.fieldTypeList = fieldTypeList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.dataList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = []
            (_etype9, _size6) = iprot.readListBegin()
            for _i10 in xrange(_size6):
              _elem11 = RDataCellModel()
              _elem11.read(iprot)
              _elem5.append(_elem11)
            iprot.readListEnd()
            self.dataList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.fieldTypeList = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = RStructTypeModel()
            _elem17.read(iprot)
            self.fieldTypeList.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RQueryResultModel')
    if self.dataList is not None:
      oprot.writeFieldBegin('dataList', TType.LIST, 1)
      oprot.writeListBegin(TType.LIST, len(self.dataList))
      for iter18 in self.dataList:
        oprot.writeListBegin(TType.STRUCT, len(iter18))
        for iter19 in iter18:
          iter19.write(oprot)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.fieldTypeList is not None:
      oprot.writeFieldBegin('fieldTypeList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.fieldTypeList))
      for iter20 in self.fieldTypeList:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dataList)
    value = (value * 31) ^ hash(self.fieldTypeList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RDataStoreInfoModel:
  """
  Attributes:
   - userId
   - tableName
   - sDay
   - sHour
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userId', None, None, ), # 1
    (2, TType.STRING, 'tableName', None, None, ), # 2
    (3, TType.STRING, 'sDay', None, None, ), # 3
    (4, TType.STRING, 'sHour', None, None, ), # 4
  )

  def __init__(self, userId=None, tableName=None, sDay=None, sHour=None,):
    self.userId = userId
    self.tableName = tableName
    self.sDay = sDay
    self.sHour = sHour

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tableName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sDay = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sHour = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RDataStoreInfoModel')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 1)
      oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    if self.tableName is not None:
      oprot.writeFieldBegin('tableName', TType.STRING, 2)
      oprot.writeString(self.tableName)
      oprot.writeFieldEnd()
    if self.sDay is not None:
      oprot.writeFieldBegin('sDay', TType.STRING, 3)
      oprot.writeString(self.sDay)
      oprot.writeFieldEnd()
    if self.sHour is not None:
      oprot.writeFieldBegin('sHour', TType.STRING, 4)
      oprot.writeString(self.sHour)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.tableName)
    value = (value * 31) ^ hash(self.sDay)
    value = (value * 31) ^ hash(self.sHour)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ROfflineTaskInfo:
  """
  Attributes:
   - taskId
   - taskName
   - userId
   - sql
   - isEsQuery
   - fromTime
   - toTime
   - fullText
   - isProcessTime
   - queryStatue
   - startTime
   - endTime
   - createTime
   - taskDesc
   - handleMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'taskId', None, None, ), # 1
    (2, TType.STRING, 'taskName', None, None, ), # 2
    (3, TType.STRING, 'userId', None, None, ), # 3
    (4, TType.STRING, 'sql', None, None, ), # 4
    (5, TType.BOOL, 'isEsQuery', None, None, ), # 5
    (6, TType.I64, 'fromTime', None, None, ), # 6
    (7, TType.I64, 'toTime', None, None, ), # 7
    (8, TType.STRING, 'fullText', None, None, ), # 8
    (9, TType.BOOL, 'isProcessTime', None, None, ), # 9
    (10, TType.I32, 'queryStatue', None, None, ), # 10
    (11, TType.I64, 'startTime', None, None, ), # 11
    (12, TType.I64, 'endTime', None, None, ), # 12
    (13, TType.I64, 'createTime', None, None, ), # 13
    (14, TType.STRING, 'taskDesc', None, None, ), # 14
    (15, TType.STRING, 'handleMsg', None, None, ), # 15
  )

  def __init__(self, taskId=None, taskName=None, userId=None, sql=None, isEsQuery=None, fromTime=None, toTime=None, fullText=None, isProcessTime=None, queryStatue=None, startTime=None, endTime=None, createTime=None, taskDesc=None, handleMsg=None,):
    self.taskId = taskId
    self.taskName = taskName
    self.userId = userId
    self.sql = sql
    self.isEsQuery = isEsQuery
    self.fromTime = fromTime
    self.toTime = toTime
    self.fullText = fullText
    self.isProcessTime = isProcessTime
    self.queryStatue = queryStatue
    self.startTime = startTime
    self.endTime = endTime
    self.createTime = createTime
    self.taskDesc = taskDesc
    self.handleMsg = handleMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.taskId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.taskName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.userId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sql = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.isEsQuery = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.fromTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.toTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.fullText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.isProcessTime = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.queryStatue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.startTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.endTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.createTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.taskDesc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.handleMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ROfflineTaskInfo')
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.STRING, 1)
      oprot.writeString(self.taskId)
      oprot.writeFieldEnd()
    if self.taskName is not None:
      oprot.writeFieldBegin('taskName', TType.STRING, 2)
      oprot.writeString(self.taskName)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 3)
      oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    if self.sql is not None:
      oprot.writeFieldBegin('sql', TType.STRING, 4)
      oprot.writeString(self.sql)
      oprot.writeFieldEnd()
    if self.isEsQuery is not None:
      oprot.writeFieldBegin('isEsQuery', TType.BOOL, 5)
      oprot.writeBool(self.isEsQuery)
      oprot.writeFieldEnd()
    if self.fromTime is not None:
      oprot.writeFieldBegin('fromTime', TType.I64, 6)
      oprot.writeI64(self.fromTime)
      oprot.writeFieldEnd()
    if self.toTime is not None:
      oprot.writeFieldBegin('toTime', TType.I64, 7)
      oprot.writeI64(self.toTime)
      oprot.writeFieldEnd()
    if self.fullText is not None:
      oprot.writeFieldBegin('fullText', TType.STRING, 8)
      oprot.writeString(self.fullText)
      oprot.writeFieldEnd()
    if self.isProcessTime is not None:
      oprot.writeFieldBegin('isProcessTime', TType.BOOL, 9)
      oprot.writeBool(self.isProcessTime)
      oprot.writeFieldEnd()
    if self.queryStatue is not None:
      oprot.writeFieldBegin('queryStatue', TType.I32, 10)
      oprot.writeI32(self.queryStatue)
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 11)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 12)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 13)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.taskDesc is not None:
      oprot.writeFieldBegin('taskDesc', TType.STRING, 14)
      oprot.writeString(self.taskDesc)
      oprot.writeFieldEnd()
    if self.handleMsg is not None:
      oprot.writeFieldBegin('handleMsg', TType.STRING, 15)
      oprot.writeString(self.handleMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskId)
    value = (value * 31) ^ hash(self.taskName)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.sql)
    value = (value * 31) ^ hash(self.isEsQuery)
    value = (value * 31) ^ hash(self.fromTime)
    value = (value * 31) ^ hash(self.toTime)
    value = (value * 31) ^ hash(self.fullText)
    value = (value * 31) ^ hash(self.isProcessTime)
    value = (value * 31) ^ hash(self.queryStatue)
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.taskDesc)
    value = (value * 31) ^ hash(self.handleMsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
