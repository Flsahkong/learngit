#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import ESTypeEnum.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TQueryModel:
  """
  Attributes:
   - a_from
   - a_to
   - pageSize
   - pageNum
   - queryString
   - userId
   - type
   - database
   - isHighlighter
   - indecies
   - includeLower
   - includeUpper
   - isProcessTime
   - timeIsAsc
   - sortField
   - sortRuleASC
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'a_from', None, None, ), # 1
    (2, TType.I64, 'a_to', None, None, ), # 2
    (3, TType.I32, 'pageSize', None, 100, ), # 3
    (4, TType.I32, 'pageNum', None, 0, ), # 4
    (5, TType.STRING, 'queryString', None, None, ), # 5
    (6, TType.STRING, 'userId', None, None, ), # 6
    (7, TType.SET, 'type', (TType.STRING,None), None, ), # 7
    (8, TType.STRING, 'database', None, "aleiye", ), # 8
    (9, TType.BOOL, 'isHighlighter', None, True, ), # 9
    (10, TType.LIST, 'indecies', (TType.STRING,None), None, ), # 10
    (11, TType.BOOL, 'includeLower', None, False, ), # 11
    (12, TType.BOOL, 'includeUpper', None, True, ), # 12
    (13, TType.BOOL, 'isProcessTime', None, False, ), # 13
    (14, TType.BOOL, 'timeIsAsc', None, False, ), # 14
    (15, TType.STRING, 'sortField', None, None, ), # 15
    (16, TType.BOOL, 'sortRuleASC', None, True, ), # 16
  )

  def __init__(self, a_from=None, a_to=None, pageSize=thrift_spec[3][4], pageNum=thrift_spec[4][4], queryString=None, userId=None, type=None, database=thrift_spec[8][4], isHighlighter=thrift_spec[9][4], indecies=None, includeLower=thrift_spec[11][4], includeUpper=thrift_spec[12][4], isProcessTime=thrift_spec[13][4], timeIsAsc=thrift_spec[14][4], sortField=None, sortRuleASC=thrift_spec[16][4],):
    self.a_from = a_from
    self.a_to = a_to
    self.pageSize = pageSize
    self.pageNum = pageNum
    self.queryString = queryString
    self.userId = userId
    self.type = type
    self.database = database
    self.isHighlighter = isHighlighter
    self.indecies = indecies
    self.includeLower = includeLower
    self.includeUpper = includeUpper
    self.isProcessTime = isProcessTime
    self.timeIsAsc = timeIsAsc
    self.sortField = sortField
    self.sortRuleASC = sortRuleASC

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.a_from = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.a_to = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pageNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.queryString = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.userId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.SET:
          self.type = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.type.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.database = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.isHighlighter = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.indecies = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.indecies.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.includeLower = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.includeUpper = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.isProcessTime = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.timeIsAsc = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.sortField = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.sortRuleASC = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TQueryModel')
    if self.a_from is not None:
      oprot.writeFieldBegin('a_from', TType.I64, 1)
      oprot.writeI64(self.a_from)
      oprot.writeFieldEnd()
    if self.a_to is not None:
      oprot.writeFieldBegin('a_to', TType.I64, 2)
      oprot.writeI64(self.a_to)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 3)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    if self.pageNum is not None:
      oprot.writeFieldBegin('pageNum', TType.I32, 4)
      oprot.writeI32(self.pageNum)
      oprot.writeFieldEnd()
    if self.queryString is not None:
      oprot.writeFieldBegin('queryString', TType.STRING, 5)
      oprot.writeString(self.queryString)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 6)
      oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.SET, 7)
      oprot.writeSetBegin(TType.STRING, len(self.type))
      for iter12 in self.type:
        oprot.writeString(iter12)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.database is not None:
      oprot.writeFieldBegin('database', TType.STRING, 8)
      oprot.writeString(self.database)
      oprot.writeFieldEnd()
    if self.isHighlighter is not None:
      oprot.writeFieldBegin('isHighlighter', TType.BOOL, 9)
      oprot.writeBool(self.isHighlighter)
      oprot.writeFieldEnd()
    if self.indecies is not None:
      oprot.writeFieldBegin('indecies', TType.LIST, 10)
      oprot.writeListBegin(TType.STRING, len(self.indecies))
      for iter13 in self.indecies:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.includeLower is not None:
      oprot.writeFieldBegin('includeLower', TType.BOOL, 11)
      oprot.writeBool(self.includeLower)
      oprot.writeFieldEnd()
    if self.includeUpper is not None:
      oprot.writeFieldBegin('includeUpper', TType.BOOL, 12)
      oprot.writeBool(self.includeUpper)
      oprot.writeFieldEnd()
    if self.isProcessTime is not None:
      oprot.writeFieldBegin('isProcessTime', TType.BOOL, 13)
      oprot.writeBool(self.isProcessTime)
      oprot.writeFieldEnd()
    if self.timeIsAsc is not None:
      oprot.writeFieldBegin('timeIsAsc', TType.BOOL, 14)
      oprot.writeBool(self.timeIsAsc)
      oprot.writeFieldEnd()
    if self.sortField is not None:
      oprot.writeFieldBegin('sortField', TType.STRING, 15)
      oprot.writeString(self.sortField)
      oprot.writeFieldEnd()
    if self.sortRuleASC is not None:
      oprot.writeFieldBegin('sortRuleASC', TType.BOOL, 16)
      oprot.writeBool(self.sortRuleASC)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.a_from)
    value = (value * 31) ^ hash(self.a_to)
    value = (value * 31) ^ hash(self.pageSize)
    value = (value * 31) ^ hash(self.pageNum)
    value = (value * 31) ^ hash(self.queryString)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.database)
    value = (value * 31) ^ hash(self.isHighlighter)
    value = (value * 31) ^ hash(self.indecies)
    value = (value * 31) ^ hash(self.includeLower)
    value = (value * 31) ^ hash(self.includeUpper)
    value = (value * 31) ^ hash(self.isProcessTime)
    value = (value * 31) ^ hash(self.timeIsAsc)
    value = (value * 31) ^ hash(self.sortField)
    value = (value * 31) ^ hash(self.sortRuleASC)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TScanModel:
  """
  Attributes:
   - scanfields
   - scanSize
   - scrollID
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'scanfields', (TType.STRING,None), None, ), # 1
    (2, TType.I32, 'scanSize', None, 1000, ), # 2
    (3, TType.STRING, 'scrollID', None, None, ), # 3
  )

  def __init__(self, scanfields=None, scanSize=thrift_spec[2][4], scrollID=None,):
    self.scanfields = scanfields
    self.scanSize = scanSize
    self.scrollID = scrollID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.scanfields = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.scanfields.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.scanSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.scrollID = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TScanModel')
    if self.scanfields is not None:
      oprot.writeFieldBegin('scanfields', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.scanfields))
      for iter20 in self.scanfields:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.scanSize is not None:
      oprot.writeFieldBegin('scanSize', TType.I32, 2)
      oprot.writeI32(self.scanSize)
      oprot.writeFieldEnd()
    if self.scrollID is not None:
      oprot.writeFieldBegin('scrollID', TType.STRING, 3)
      oprot.writeString(self.scrollID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scanfields)
    value = (value * 31) ^ hash(self.scanSize)
    value = (value * 31) ^ hash(self.scrollID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESStructTypeModel:
  """
  Attributes:
   - fieldName
   - fieldType
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'fieldName', None, None, ), # 1
    (2, TType.I32, 'fieldType', None, None, ), # 2
    (3, TType.STRING, 'data', None, None, ), # 3
  )

  def __init__(self, fieldName=None, fieldType=None, data=None,):
    self.fieldName = fieldName
    self.fieldType = fieldType
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.fieldName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.fieldType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.data = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESStructTypeModel')
    if self.fieldName is not None:
      oprot.writeFieldBegin('fieldName', TType.STRING, 1)
      oprot.writeString(self.fieldName)
      oprot.writeFieldEnd()
    if self.fieldType is not None:
      oprot.writeFieldBegin('fieldType', TType.I32, 2)
      oprot.writeI32(self.fieldType)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 3)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fieldName)
    value = (value * 31) ^ hash(self.fieldType)
    value = (value * 31) ^ hash(self.data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TUpdateModel:
  """
  Attributes:
   - fieldTypeList
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'fieldTypeList', (TType.STRUCT,(ESStructTypeModel, ESStructTypeModel.thrift_spec)), None, ), # 1
  )

  def __init__(self, fieldTypeList=None,):
    self.fieldTypeList = fieldTypeList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.fieldTypeList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = ESStructTypeModel()
            _elem26.read(iprot)
            self.fieldTypeList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TUpdateModel')
    if self.fieldTypeList is not None:
      oprot.writeFieldBegin('fieldTypeList', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.fieldTypeList))
      for iter27 in self.fieldTypeList:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fieldTypeList)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ScanResult:
  """
  Attributes:
   - lines
   - totalCount
   - scanCount
   - scrollID
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'lines', (TType.MAP,(TType.STRING,None,TType.STRING,None)), None, ), # 1
    (2, TType.I64, 'totalCount', None, None, ), # 2
    (3, TType.I64, 'scanCount', None, None, ), # 3
    (4, TType.STRING, 'scrollID', None, None, ), # 4
  )

  def __init__(self, lines=None, totalCount=None, scanCount=None, scrollID=None,):
    self.lines = lines
    self.totalCount = totalCount
    self.scanCount = scanCount
    self.scrollID = scrollID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.lines = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = {}
            (_ktype35, _vtype36, _size34 ) = iprot.readMapBegin()
            for _i38 in xrange(_size34):
              _key39 = iprot.readString();
              _val40 = iprot.readString();
              _elem33[_key39] = _val40
            iprot.readMapEnd()
            self.lines.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.totalCount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.scanCount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.scrollID = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ScanResult')
    if self.lines is not None:
      oprot.writeFieldBegin('lines', TType.LIST, 1)
      oprot.writeListBegin(TType.MAP, len(self.lines))
      for iter41 in self.lines:
        oprot.writeMapBegin(TType.STRING, TType.STRING, len(iter41))
        for kiter42,viter43 in iter41.items():
          oprot.writeString(kiter42)
          oprot.writeString(viter43)
        oprot.writeMapEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I64, 2)
      oprot.writeI64(self.totalCount)
      oprot.writeFieldEnd()
    if self.scanCount is not None:
      oprot.writeFieldBegin('scanCount', TType.I64, 3)
      oprot.writeI64(self.scanCount)
      oprot.writeFieldEnd()
    if self.scrollID is not None:
      oprot.writeFieldBegin('scrollID', TType.STRING, 4)
      oprot.writeString(self.scrollID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lines)
    value = (value * 31) ^ hash(self.totalCount)
    value = (value * 31) ^ hash(self.scanCount)
    value = (value * 31) ^ hash(self.scrollID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TQueryIndexModel:
  """
  Attributes:
   - a_from
   - a_to
   - userId
   - database
   - isProcessTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'a_from', None, None, ), # 1
    (2, TType.I64, 'a_to', None, None, ), # 2
    (3, TType.STRING, 'userId', None, None, ), # 3
    (4, TType.STRING, 'database', None, None, ), # 4
    (5, TType.BOOL, 'isProcessTime', None, False, ), # 5
  )

  def __init__(self, a_from=None, a_to=None, userId=None, database=None, isProcessTime=thrift_spec[5][4],):
    self.a_from = a_from
    self.a_to = a_to
    self.userId = userId
    self.database = database
    self.isProcessTime = isProcessTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.a_from = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.a_to = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.userId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.database = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.isProcessTime = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TQueryIndexModel')
    if self.a_from is not None:
      oprot.writeFieldBegin('a_from', TType.I64, 1)
      oprot.writeI64(self.a_from)
      oprot.writeFieldEnd()
    if self.a_to is not None:
      oprot.writeFieldBegin('a_to', TType.I64, 2)
      oprot.writeI64(self.a_to)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 3)
      oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    if self.database is not None:
      oprot.writeFieldBegin('database', TType.STRING, 4)
      oprot.writeString(self.database)
      oprot.writeFieldEnd()
    if self.isProcessTime is not None:
      oprot.writeFieldBegin('isProcessTime', TType.BOOL, 5)
      oprot.writeBool(self.isProcessTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.a_from)
    value = (value * 31) ^ hash(self.a_to)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.database)
    value = (value * 31) ^ hash(self.isProcessTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TRecordModel:
  """
  Attributes:
   - type
   - auxiliaryFields
   - fields
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'type', None, None, ), # 1
    (2, TType.MAP, 'auxiliaryFields', (TType.STRING,None,TType.STRING,None), None, ), # 2
    (3, TType.MAP, 'fields', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, type=None, auxiliaryFields=None, fields=None,):
    self.type = type
    self.auxiliaryFields = auxiliaryFields
    self.fields = fields

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.auxiliaryFields = {}
          (_ktype45, _vtype46, _size44 ) = iprot.readMapBegin()
          for _i48 in xrange(_size44):
            _key49 = iprot.readString();
            _val50 = iprot.readString();
            self.auxiliaryFields[_key49] = _val50
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.fields = {}
          (_ktype52, _vtype53, _size51 ) = iprot.readMapBegin()
          for _i55 in xrange(_size51):
            _key56 = iprot.readString();
            _val57 = iprot.readString();
            self.fields[_key56] = _val57
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TRecordModel')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 1)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.auxiliaryFields is not None:
      oprot.writeFieldBegin('auxiliaryFields', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.auxiliaryFields))
      for kiter58,viter59 in self.auxiliaryFields.items():
        oprot.writeString(kiter58)
        oprot.writeString(viter59)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.fields is not None:
      oprot.writeFieldBegin('fields', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.fields))
      for kiter60,viter61 in self.fields.items():
        oprot.writeString(kiter60)
        oprot.writeString(viter61)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.auxiliaryFields)
    value = (value * 31) ^ hash(self.fields)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TResultModel:
  """
  Attributes:
   - hits
   - tooktime
   - pageSize
   - pageNum
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'hits', (TType.STRUCT,(TRecordModel, TRecordModel.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'tooktime', None, None, ), # 2
    (3, TType.I32, 'pageSize', None, None, ), # 3
    (4, TType.I32, 'pageNum', None, None, ), # 4
    (5, TType.I64, 'count', None, None, ), # 5
  )

  def __init__(self, hits=None, tooktime=None, pageSize=None, pageNum=None, count=None,):
    self.hits = hits
    self.tooktime = tooktime
    self.pageSize = pageSize
    self.pageNum = pageNum
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.hits = []
          (_etype65, _size62) = iprot.readListBegin()
          for _i66 in xrange(_size62):
            _elem67 = TRecordModel()
            _elem67.read(iprot)
            self.hits.append(_elem67)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tooktime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pageNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.count = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TResultModel')
    if self.hits is not None:
      oprot.writeFieldBegin('hits', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.hits))
      for iter68 in self.hits:
        iter68.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tooktime is not None:
      oprot.writeFieldBegin('tooktime', TType.STRING, 2)
      oprot.writeString(self.tooktime)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 3)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    if self.pageNum is not None:
      oprot.writeFieldBegin('pageNum', TType.I32, 4)
      oprot.writeI32(self.pageNum)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 5)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hits)
    value = (value * 31) ^ hash(self.tooktime)
    value = (value * 31) ^ hash(self.pageSize)
    value = (value * 31) ^ hash(self.pageNum)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TFieldAttr:
  """
  Attributes:
   - name
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
  )

  def __init__(self, name=None, type=None,):
    self.name = name
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TFieldAttr')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 2)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TMappingMetaModel:
  """
  Attributes:
   - index
   - type
   - auxiliaryFields
   - fields
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'index', None, None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
    (3, TType.LIST, 'auxiliaryFields', (TType.STRUCT,(TFieldAttr, TFieldAttr.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'fields', (TType.STRUCT,(TFieldAttr, TFieldAttr.thrift_spec)), None, ), # 4
  )

  def __init__(self, index=None, type=None, auxiliaryFields=None, fields=None,):
    self.index = index
    self.type = type
    self.auxiliaryFields = auxiliaryFields
    self.fields = fields

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.index = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.auxiliaryFields = []
          (_etype72, _size69) = iprot.readListBegin()
          for _i73 in xrange(_size69):
            _elem74 = TFieldAttr()
            _elem74.read(iprot)
            self.auxiliaryFields.append(_elem74)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.fields = []
          (_etype78, _size75) = iprot.readListBegin()
          for _i79 in xrange(_size75):
            _elem80 = TFieldAttr()
            _elem80.read(iprot)
            self.fields.append(_elem80)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TMappingMetaModel')
    if self.index is not None:
      oprot.writeFieldBegin('index', TType.STRING, 1)
      oprot.writeString(self.index)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 2)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.auxiliaryFields is not None:
      oprot.writeFieldBegin('auxiliaryFields', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.auxiliaryFields))
      for iter81 in self.auxiliaryFields:
        iter81.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.fields is not None:
      oprot.writeFieldBegin('fields', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.fields))
      for iter82 in self.fields:
        iter82.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.index)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.auxiliaryFields)
    value = (value * 31) ^ hash(self.fields)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TResultTable:
  """
  Attributes:
   - header
   - datas
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'header', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'datas', (TType.LIST,(TType.STRING,None)), None, ), # 2
  )

  def __init__(self, header=None, datas=None,):
    self.header = header
    self.datas = datas

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.header = []
          (_etype86, _size83) = iprot.readListBegin()
          for _i87 in xrange(_size83):
            _elem88 = iprot.readString();
            self.header.append(_elem88)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.datas = []
          (_etype92, _size89) = iprot.readListBegin()
          for _i93 in xrange(_size89):
            _elem94 = []
            (_etype98, _size95) = iprot.readListBegin()
            for _i99 in xrange(_size95):
              _elem100 = iprot.readString();
              _elem94.append(_elem100)
            iprot.readListEnd()
            self.datas.append(_elem94)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TResultTable')
    if self.header is not None:
      oprot.writeFieldBegin('header', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.header))
      for iter101 in self.header:
        oprot.writeString(iter101)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.datas is not None:
      oprot.writeFieldBegin('datas', TType.LIST, 2)
      oprot.writeListBegin(TType.LIST, len(self.datas))
      for iter102 in self.datas:
        oprot.writeListBegin(TType.STRING, len(iter102))
        for iter103 in iter102:
          oprot.writeString(iter103)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.header)
    value = (value * 31) ^ hash(self.datas)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FieldStatResult:
  """
  Attributes:
   - field
   - count
   - avg
   - max
   - min
   - sum
   - dcount
   - terms
   - stat
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'field', None, None, ), # 1
    (2, TType.I64, 'count', None, None, ), # 2
    (3, TType.DOUBLE, 'avg', None, None, ), # 3
    (4, TType.DOUBLE, 'max', None, None, ), # 4
    (5, TType.DOUBLE, 'min', None, None, ), # 5
    (6, TType.DOUBLE, 'sum', None, None, ), # 6
    (7, TType.I64, 'dcount', None, None, ), # 7
    (8, TType.MAP, 'terms', (TType.STRING,None,TType.I64,None), None, ), # 8
    (9, TType.BOOL, 'stat', None, True, ), # 9
  )

  def __init__(self, field=None, count=None, avg=None, max=None, min=None, sum=None, dcount=None, terms=None, stat=thrift_spec[9][4],):
    self.field = field
    self.count = count
    self.avg = avg
    self.max = max
    self.min = min
    self.sum = sum
    self.dcount = dcount
    self.terms = terms
    self.stat = stat

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.field = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.avg = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.max = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.min = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.sum = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.dcount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.terms = {}
          (_ktype105, _vtype106, _size104 ) = iprot.readMapBegin()
          for _i108 in xrange(_size104):
            _key109 = iprot.readString();
            _val110 = iprot.readI64();
            self.terms[_key109] = _val110
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.stat = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FieldStatResult')
    if self.field is not None:
      oprot.writeFieldBegin('field', TType.STRING, 1)
      oprot.writeString(self.field)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.avg is not None:
      oprot.writeFieldBegin('avg', TType.DOUBLE, 3)
      oprot.writeDouble(self.avg)
      oprot.writeFieldEnd()
    if self.max is not None:
      oprot.writeFieldBegin('max', TType.DOUBLE, 4)
      oprot.writeDouble(self.max)
      oprot.writeFieldEnd()
    if self.min is not None:
      oprot.writeFieldBegin('min', TType.DOUBLE, 5)
      oprot.writeDouble(self.min)
      oprot.writeFieldEnd()
    if self.sum is not None:
      oprot.writeFieldBegin('sum', TType.DOUBLE, 6)
      oprot.writeDouble(self.sum)
      oprot.writeFieldEnd()
    if self.dcount is not None:
      oprot.writeFieldBegin('dcount', TType.I64, 7)
      oprot.writeI64(self.dcount)
      oprot.writeFieldEnd()
    if self.terms is not None:
      oprot.writeFieldBegin('terms', TType.MAP, 8)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.terms))
      for kiter111,viter112 in self.terms.items():
        oprot.writeString(kiter111)
        oprot.writeI64(viter112)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.stat is not None:
      oprot.writeFieldBegin('stat', TType.BOOL, 9)
      oprot.writeBool(self.stat)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.field)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.avg)
    value = (value * 31) ^ hash(self.max)
    value = (value * 31) ^ hash(self.min)
    value = (value * 31) ^ hash(self.sum)
    value = (value * 31) ^ hash(self.dcount)
    value = (value * 31) ^ hash(self.terms)
    value = (value * 31) ^ hash(self.stat)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DELResult:
  """
  Attributes:
   - deleted
   - failed
   - found
   - missing
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deleted', None, None, ), # 1
    (2, TType.I64, 'failed', None, None, ), # 2
    (3, TType.I64, 'found', None, None, ), # 3
    (4, TType.I64, 'missing', None, None, ), # 4
  )

  def __init__(self, deleted=None, failed=None, found=None, missing=None,):
    self.deleted = deleted
    self.failed = failed
    self.found = found
    self.missing = missing

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deleted = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.failed = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.found = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.missing = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DELResult')
    if self.deleted is not None:
      oprot.writeFieldBegin('deleted', TType.I64, 1)
      oprot.writeI64(self.deleted)
      oprot.writeFieldEnd()
    if self.failed is not None:
      oprot.writeFieldBegin('failed', TType.I64, 2)
      oprot.writeI64(self.failed)
      oprot.writeFieldEnd()
    if self.found is not None:
      oprot.writeFieldBegin('found', TType.I64, 3)
      oprot.writeI64(self.found)
      oprot.writeFieldEnd()
    if self.missing is not None:
      oprot.writeFieldBegin('missing', TType.I64, 4)
      oprot.writeI64(self.missing)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.deleted)
    value = (value * 31) ^ hash(self.failed)
    value = (value * 31) ^ hash(self.found)
    value = (value * 31) ^ hash(self.missing)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateResult:
  """
  Attributes:
   - batches
   - searchFailures
   - noops
   - tookTime
   - updated
   - versionConflicts
   - indexingFailures
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'batches', None, None, ), # 1
    (2, TType.I64, 'searchFailures', None, None, ), # 2
    (3, TType.I64, 'noops', None, None, ), # 3
    (4, TType.I64, 'tookTime', None, None, ), # 4
    (5, TType.I64, 'updated', None, None, ), # 5
    (6, TType.I64, 'versionConflicts', None, None, ), # 6
    (7, TType.I64, 'indexingFailures', None, None, ), # 7
  )

  def __init__(self, batches=None, searchFailures=None, noops=None, tookTime=None, updated=None, versionConflicts=None, indexingFailures=None,):
    self.batches = batches
    self.searchFailures = searchFailures
    self.noops = noops
    self.tookTime = tookTime
    self.updated = updated
    self.versionConflicts = versionConflicts
    self.indexingFailures = indexingFailures

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.batches = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.searchFailures = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.noops = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.tookTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.updated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.versionConflicts = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.indexingFailures = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateResult')
    if self.batches is not None:
      oprot.writeFieldBegin('batches', TType.I64, 1)
      oprot.writeI64(self.batches)
      oprot.writeFieldEnd()
    if self.searchFailures is not None:
      oprot.writeFieldBegin('searchFailures', TType.I64, 2)
      oprot.writeI64(self.searchFailures)
      oprot.writeFieldEnd()
    if self.noops is not None:
      oprot.writeFieldBegin('noops', TType.I64, 3)
      oprot.writeI64(self.noops)
      oprot.writeFieldEnd()
    if self.tookTime is not None:
      oprot.writeFieldBegin('tookTime', TType.I64, 4)
      oprot.writeI64(self.tookTime)
      oprot.writeFieldEnd()
    if self.updated is not None:
      oprot.writeFieldBegin('updated', TType.I64, 5)
      oprot.writeI64(self.updated)
      oprot.writeFieldEnd()
    if self.versionConflicts is not None:
      oprot.writeFieldBegin('versionConflicts', TType.I64, 6)
      oprot.writeI64(self.versionConflicts)
      oprot.writeFieldEnd()
    if self.indexingFailures is not None:
      oprot.writeFieldBegin('indexingFailures', TType.I64, 7)
      oprot.writeI64(self.indexingFailures)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.batches)
    value = (value * 31) ^ hash(self.searchFailures)
    value = (value * 31) ^ hash(self.noops)
    value = (value * 31) ^ hash(self.tookTime)
    value = (value * 31) ^ hash(self.updated)
    value = (value * 31) ^ hash(self.versionConflicts)
    value = (value * 31) ^ hash(self.indexingFailures)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TCSVResult:
  """
  Attributes:
   - headers
   - lines
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'headers', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'lines', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, headers=None, lines=None,):
    self.headers = headers
    self.lines = lines

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.headers = []
          (_etype116, _size113) = iprot.readListBegin()
          for _i117 in xrange(_size113):
            _elem118 = iprot.readString();
            self.headers.append(_elem118)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.lines = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = iprot.readString();
            self.lines.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TCSVResult')
    if self.headers is not None:
      oprot.writeFieldBegin('headers', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.headers))
      for iter125 in self.headers:
        oprot.writeString(iter125)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.lines is not None:
      oprot.writeFieldBegin('lines', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.lines))
      for iter126 in self.lines:
        oprot.writeString(iter126)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.headers)
    value = (value * 31) ^ hash(self.lines)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CSVParameter:
  """
  Attributes:
   - flat
   - separator
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'flat', None, True, ), # 1
    (2, TType.STRING, 'separator', None, ",", ), # 2
  )

  def __init__(self, flat=thrift_spec[1][4], separator=thrift_spec[2][4],):
    self.flat = flat
    self.separator = separator

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.flat = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.separator = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CSVParameter')
    if self.flat is not None:
      oprot.writeFieldBegin('flat', TType.BOOL, 1)
      oprot.writeBool(self.flat)
      oprot.writeFieldEnd()
    if self.separator is not None:
      oprot.writeFieldBegin('separator', TType.STRING, 2)
      oprot.writeString(self.separator)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.flat)
    value = (value * 31) ^ hash(self.separator)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
