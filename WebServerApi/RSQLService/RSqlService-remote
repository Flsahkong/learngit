#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from RSQLService import RSqlService
from RSQLService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  bool createNewTableWithSql(string userId, string tableName, string sql)')
  print('   getTableSchema(string userId, string tableName, i32 fileNum)')
  print('  RQueryResultModel query(string userId, string sql, i64 fromTime, i64 toTime)')
  print('  bool dropTable(RDataStoreInfoModel storeModel)')
  print('   getTableDataStoreInfo(string userId, string tableName)')
  print('   getUserTable(string userId)')
  print('  string queryByOffLine(ROfflineTaskInfo taskInfo)')
  print('   queryOfflineTaskInfo(string userId)')
  print('  RQueryResultModel findDataWithTaskId(string userId, string taskId)')
  print('  bool isTaskFinish(string userId, string taskId)')
  print('  bool deleteTask(string userId, string taskId)')
  print('  bool updateTaskName(ROfflineTaskInfo taskInfo)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = RSqlService.Client(protocol)
transport.open()

if cmd == 'createNewTableWithSql':
  if len(args) != 3:
    print('createNewTableWithSql requires 3 args')
    sys.exit(1)
  pp.pprint(client.createNewTableWithSql(args[0],args[1],args[2],))

elif cmd == 'getTableSchema':
  if len(args) != 3:
    print('getTableSchema requires 3 args')
    sys.exit(1)
  pp.pprint(client.getTableSchema(args[0],args[1],eval(args[2]),))

elif cmd == 'query':
  if len(args) != 4:
    print('query requires 4 args')
    sys.exit(1)
  pp.pprint(client.query(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'dropTable':
  if len(args) != 1:
    print('dropTable requires 1 args')
    sys.exit(1)
  pp.pprint(client.dropTable(eval(args[0]),))

elif cmd == 'getTableDataStoreInfo':
  if len(args) != 2:
    print('getTableDataStoreInfo requires 2 args')
    sys.exit(1)
  pp.pprint(client.getTableDataStoreInfo(args[0],args[1],))

elif cmd == 'getUserTable':
  if len(args) != 1:
    print('getUserTable requires 1 args')
    sys.exit(1)
  pp.pprint(client.getUserTable(args[0],))

elif cmd == 'queryByOffLine':
  if len(args) != 1:
    print('queryByOffLine requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryByOffLine(eval(args[0]),))

elif cmd == 'queryOfflineTaskInfo':
  if len(args) != 1:
    print('queryOfflineTaskInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryOfflineTaskInfo(args[0],))

elif cmd == 'findDataWithTaskId':
  if len(args) != 2:
    print('findDataWithTaskId requires 2 args')
    sys.exit(1)
  pp.pprint(client.findDataWithTaskId(args[0],args[1],))

elif cmd == 'isTaskFinish':
  if len(args) != 2:
    print('isTaskFinish requires 2 args')
    sys.exit(1)
  pp.pprint(client.isTaskFinish(args[0],args[1],))

elif cmd == 'deleteTask':
  if len(args) != 2:
    print('deleteTask requires 2 args')
    sys.exit(1)
  pp.pprint(client.deleteTask(args[0],args[1],))

elif cmd == 'updateTaskName':
  if len(args) != 1:
    print('updateTaskName requires 1 args')
    sys.exit(1)
  pp.pprint(client.updateTaskName(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
