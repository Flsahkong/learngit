#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def query(self, model):
    """
    Parameters:
     - model
    """
    pass

  def query2CSV(self, model, csvParameter):
    """
    Parameters:
     - model
     - csvParameter
    """
    pass

  def queryReport(self, model):
    """
    Parameters:
     - model
    """
    pass

  def queryReport2CSV(self, model, csvParameter):
    """
    Parameters:
     - model
     - csvParameter
    """
    pass

  def getDocNum(self, indecies, types):
    """
    Parameters:
     - indecies
     - types
    """
    pass

  def queryIndecies(self, model):
    """
    Parameters:
     - model
    """
    pass

  def getFieldMetaDataByUserIdAndType(self, userId, types):
    """
    Parameters:
     - userId
     - types
    """
    pass

  def getFieldMetaDataByIndeciesAndType(self, indecies, type):
    """
    Parameters:
     - indecies
     - type
    """
    pass

  def getIndexNames(self, a_from, a_to, userId, database, isProcessTime):
    """
    Parameters:
     - a_from
     - a_to
     - userId
     - database
     - isProcessTime
    """
    pass

  def queryByDelete(self, model):
    """
    Parameters:
     - model
    """
    pass

  def scanData(self, queryModel, scanModel):
    """
    Parameters:
     - queryModel
     - scanModel
    """
    pass

  def fieldStat(self, model, field, type, top):
    """
    Parameters:
     - model
     - field
     - type
     - top
    """
    pass

  def queryType(self, userId):
    """
    Parameters:
     - userId
    """
    pass

  def queryByUpdate(self, queryModel, updateModel):
    """
    Parameters:
     - queryModel
     - updateModel
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def query(self, model):
    """
    Parameters:
     - model
    """
    self.send_query(model)
    return self.recv_query()

  def send_query(self, model):
    self._oprot.writeMessageBegin('query', TMessageType.CALL, self._seqid)
    args = query_args()
    args.model = model
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_query(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = query_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "query failed: unknown result");

  def query2CSV(self, model, csvParameter):
    """
    Parameters:
     - model
     - csvParameter
    """
    self.send_query2CSV(model, csvParameter)
    return self.recv_query2CSV()

  def send_query2CSV(self, model, csvParameter):
    self._oprot.writeMessageBegin('query2CSV', TMessageType.CALL, self._seqid)
    args = query2CSV_args()
    args.model = model
    args.csvParameter = csvParameter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_query2CSV(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = query2CSV_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "query2CSV failed: unknown result");

  def queryReport(self, model):
    """
    Parameters:
     - model
    """
    self.send_queryReport(model)
    return self.recv_queryReport()

  def send_queryReport(self, model):
    self._oprot.writeMessageBegin('queryReport', TMessageType.CALL, self._seqid)
    args = queryReport_args()
    args.model = model
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryReport(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryReport_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryReport failed: unknown result");

  def queryReport2CSV(self, model, csvParameter):
    """
    Parameters:
     - model
     - csvParameter
    """
    self.send_queryReport2CSV(model, csvParameter)
    return self.recv_queryReport2CSV()

  def send_queryReport2CSV(self, model, csvParameter):
    self._oprot.writeMessageBegin('queryReport2CSV', TMessageType.CALL, self._seqid)
    args = queryReport2CSV_args()
    args.model = model
    args.csvParameter = csvParameter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryReport2CSV(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryReport2CSV_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryReport2CSV failed: unknown result");

  def getDocNum(self, indecies, types):
    """
    Parameters:
     - indecies
     - types
    """
    self.send_getDocNum(indecies, types)
    return self.recv_getDocNum()

  def send_getDocNum(self, indecies, types):
    self._oprot.writeMessageBegin('getDocNum', TMessageType.CALL, self._seqid)
    args = getDocNum_args()
    args.indecies = indecies
    args.types = types
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDocNum(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getDocNum_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDocNum failed: unknown result");

  def queryIndecies(self, model):
    """
    Parameters:
     - model
    """
    self.send_queryIndecies(model)
    return self.recv_queryIndecies()

  def send_queryIndecies(self, model):
    self._oprot.writeMessageBegin('queryIndecies', TMessageType.CALL, self._seqid)
    args = queryIndecies_args()
    args.model = model
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryIndecies(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryIndecies_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryIndecies failed: unknown result");

  def getFieldMetaDataByUserIdAndType(self, userId, types):
    """
    Parameters:
     - userId
     - types
    """
    self.send_getFieldMetaDataByUserIdAndType(userId, types)
    return self.recv_getFieldMetaDataByUserIdAndType()

  def send_getFieldMetaDataByUserIdAndType(self, userId, types):
    self._oprot.writeMessageBegin('getFieldMetaDataByUserIdAndType', TMessageType.CALL, self._seqid)
    args = getFieldMetaDataByUserIdAndType_args()
    args.userId = userId
    args.types = types
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getFieldMetaDataByUserIdAndType(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getFieldMetaDataByUserIdAndType_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getFieldMetaDataByUserIdAndType failed: unknown result");

  def getFieldMetaDataByIndeciesAndType(self, indecies, type):
    """
    Parameters:
     - indecies
     - type
    """
    self.send_getFieldMetaDataByIndeciesAndType(indecies, type)
    return self.recv_getFieldMetaDataByIndeciesAndType()

  def send_getFieldMetaDataByIndeciesAndType(self, indecies, type):
    self._oprot.writeMessageBegin('getFieldMetaDataByIndeciesAndType', TMessageType.CALL, self._seqid)
    args = getFieldMetaDataByIndeciesAndType_args()
    args.indecies = indecies
    args.type = type
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getFieldMetaDataByIndeciesAndType(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getFieldMetaDataByIndeciesAndType_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getFieldMetaDataByIndeciesAndType failed: unknown result");

  def getIndexNames(self, a_from, a_to, userId, database, isProcessTime):
    """
    Parameters:
     - a_from
     - a_to
     - userId
     - database
     - isProcessTime
    """
    self.send_getIndexNames(a_from, a_to, userId, database, isProcessTime)
    return self.recv_getIndexNames()

  def send_getIndexNames(self, a_from, a_to, userId, database, isProcessTime):
    self._oprot.writeMessageBegin('getIndexNames', TMessageType.CALL, self._seqid)
    args = getIndexNames_args()
    args.a_from = a_from
    args.a_to = a_to
    args.userId = userId
    args.database = database
    args.isProcessTime = isProcessTime
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getIndexNames(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getIndexNames_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getIndexNames failed: unknown result");

  def queryByDelete(self, model):
    """
    Parameters:
     - model
    """
    self.send_queryByDelete(model)
    return self.recv_queryByDelete()

  def send_queryByDelete(self, model):
    self._oprot.writeMessageBegin('queryByDelete', TMessageType.CALL, self._seqid)
    args = queryByDelete_args()
    args.model = model
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryByDelete(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryByDelete_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryByDelete failed: unknown result");

  def scanData(self, queryModel, scanModel):
    """
    Parameters:
     - queryModel
     - scanModel
    """
    self.send_scanData(queryModel, scanModel)
    return self.recv_scanData()

  def send_scanData(self, queryModel, scanModel):
    self._oprot.writeMessageBegin('scanData', TMessageType.CALL, self._seqid)
    args = scanData_args()
    args.queryModel = queryModel
    args.scanModel = scanModel
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_scanData(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = scanData_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "scanData failed: unknown result");

  def fieldStat(self, model, field, type, top):
    """
    Parameters:
     - model
     - field
     - type
     - top
    """
    self.send_fieldStat(model, field, type, top)
    return self.recv_fieldStat()

  def send_fieldStat(self, model, field, type, top):
    self._oprot.writeMessageBegin('fieldStat', TMessageType.CALL, self._seqid)
    args = fieldStat_args()
    args.model = model
    args.field = field
    args.type = type
    args.top = top
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_fieldStat(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = fieldStat_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "fieldStat failed: unknown result");

  def queryType(self, userId):
    """
    Parameters:
     - userId
    """
    self.send_queryType(userId)
    return self.recv_queryType()

  def send_queryType(self, userId):
    self._oprot.writeMessageBegin('queryType', TMessageType.CALL, self._seqid)
    args = queryType_args()
    args.userId = userId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryType(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryType_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryType failed: unknown result");

  def queryByUpdate(self, queryModel, updateModel):
    """
    Parameters:
     - queryModel
     - updateModel
    """
    self.send_queryByUpdate(queryModel, updateModel)
    return self.recv_queryByUpdate()

  def send_queryByUpdate(self, queryModel, updateModel):
    self._oprot.writeMessageBegin('queryByUpdate', TMessageType.CALL, self._seqid)
    args = queryByUpdate_args()
    args.queryModel = queryModel
    args.updateModel = updateModel
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryByUpdate(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryByUpdate_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryByUpdate failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["query"] = Processor.process_query
    self._processMap["query2CSV"] = Processor.process_query2CSV
    self._processMap["queryReport"] = Processor.process_queryReport
    self._processMap["queryReport2CSV"] = Processor.process_queryReport2CSV
    self._processMap["getDocNum"] = Processor.process_getDocNum
    self._processMap["queryIndecies"] = Processor.process_queryIndecies
    self._processMap["getFieldMetaDataByUserIdAndType"] = Processor.process_getFieldMetaDataByUserIdAndType
    self._processMap["getFieldMetaDataByIndeciesAndType"] = Processor.process_getFieldMetaDataByIndeciesAndType
    self._processMap["getIndexNames"] = Processor.process_getIndexNames
    self._processMap["queryByDelete"] = Processor.process_queryByDelete
    self._processMap["scanData"] = Processor.process_scanData
    self._processMap["fieldStat"] = Processor.process_fieldStat
    self._processMap["queryType"] = Processor.process_queryType
    self._processMap["queryByUpdate"] = Processor.process_queryByUpdate

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_query(self, seqid, iprot, oprot):
    args = query_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = query_result()
    try:
      result.success = self._handler.query(args.model)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("query", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_query2CSV(self, seqid, iprot, oprot):
    args = query2CSV_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = query2CSV_result()
    try:
      result.success = self._handler.query2CSV(args.model, args.csvParameter)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("query2CSV", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryReport(self, seqid, iprot, oprot):
    args = queryReport_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryReport_result()
    try:
      result.success = self._handler.queryReport(args.model)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("queryReport", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryReport2CSV(self, seqid, iprot, oprot):
    args = queryReport2CSV_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryReport2CSV_result()
    try:
      result.success = self._handler.queryReport2CSV(args.model, args.csvParameter)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("queryReport2CSV", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDocNum(self, seqid, iprot, oprot):
    args = getDocNum_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDocNum_result()
    try:
      result.success = self._handler.getDocNum(args.indecies, args.types)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("getDocNum", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryIndecies(self, seqid, iprot, oprot):
    args = queryIndecies_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryIndecies_result()
    try:
      result.success = self._handler.queryIndecies(args.model)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("queryIndecies", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getFieldMetaDataByUserIdAndType(self, seqid, iprot, oprot):
    args = getFieldMetaDataByUserIdAndType_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getFieldMetaDataByUserIdAndType_result()
    try:
      result.success = self._handler.getFieldMetaDataByUserIdAndType(args.userId, args.types)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("getFieldMetaDataByUserIdAndType", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getFieldMetaDataByIndeciesAndType(self, seqid, iprot, oprot):
    args = getFieldMetaDataByIndeciesAndType_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getFieldMetaDataByIndeciesAndType_result()
    try:
      result.success = self._handler.getFieldMetaDataByIndeciesAndType(args.indecies, args.type)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("getFieldMetaDataByIndeciesAndType", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getIndexNames(self, seqid, iprot, oprot):
    args = getIndexNames_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getIndexNames_result()
    try:
      result.success = self._handler.getIndexNames(args.a_from, args.a_to, args.userId, args.database, args.isProcessTime)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("getIndexNames", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryByDelete(self, seqid, iprot, oprot):
    args = queryByDelete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryByDelete_result()
    try:
      result.success = self._handler.queryByDelete(args.model)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("queryByDelete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_scanData(self, seqid, iprot, oprot):
    args = scanData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = scanData_result()
    try:
      result.success = self._handler.scanData(args.queryModel, args.scanModel)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("scanData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_fieldStat(self, seqid, iprot, oprot):
    args = fieldStat_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = fieldStat_result()
    try:
      result.success = self._handler.fieldStat(args.model, args.field, args.type, args.top)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("fieldStat", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryType(self, seqid, iprot, oprot):
    args = queryType_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryType_result()
    try:
      result.success = self._handler.queryType(args.userId)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("queryType", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryByUpdate(self, seqid, iprot, oprot):
    args = queryByUpdate_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryByUpdate_result()
    try:
      result.success = self._handler.queryByUpdate(args.queryModel, args.updateModel)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("queryByUpdate", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class query_args:
  """
  Attributes:
   - model
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'model', (ESmodel.ttypes.TQueryModel, ESmodel.ttypes.TQueryModel.thrift_spec), None, ), # 1
  )

  def __init__(self, model=None,):
    self.model = model

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.model = ESmodel.ttypes.TQueryModel()
          self.model.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('query_args')
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRUCT, 1)
      self.model.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.model)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class query_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ESmodel.ttypes.TResultModel, ESmodel.ttypes.TResultModel.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ESmodel.ttypes.TResultModel()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('query_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class query2CSV_args:
  """
  Attributes:
   - model
   - csvParameter
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'model', (ESmodel.ttypes.TQueryModel, ESmodel.ttypes.TQueryModel.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'csvParameter', (ESmodel.ttypes.CSVParameter, ESmodel.ttypes.CSVParameter.thrift_spec), None, ), # 2
  )

  def __init__(self, model=None, csvParameter=None,):
    self.model = model
    self.csvParameter = csvParameter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.model = ESmodel.ttypes.TQueryModel()
          self.model.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.csvParameter = ESmodel.ttypes.CSVParameter()
          self.csvParameter.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('query2CSV_args')
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRUCT, 1)
      self.model.write(oprot)
      oprot.writeFieldEnd()
    if self.csvParameter is not None:
      oprot.writeFieldBegin('csvParameter', TType.STRUCT, 2)
      self.csvParameter.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.model)
    value = (value * 31) ^ hash(self.csvParameter)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class query2CSV_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ESmodel.ttypes.TCSVResult, ESmodel.ttypes.TCSVResult.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ESmodel.ttypes.TCSVResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('query2CSV_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryReport_args:
  """
  Attributes:
   - model
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'model', (ESmodel.ttypes.TQueryModel, ESmodel.ttypes.TQueryModel.thrift_spec), None, ), # 1
  )

  def __init__(self, model=None,):
    self.model = model

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.model = ESmodel.ttypes.TQueryModel()
          self.model.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryReport_args')
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRUCT, 1)
      self.model.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.model)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryReport_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ESmodel.ttypes.TResultTable, ESmodel.ttypes.TResultTable.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ESmodel.ttypes.TResultTable()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryReport_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryReport2CSV_args:
  """
  Attributes:
   - model
   - csvParameter
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'model', (ESmodel.ttypes.TQueryModel, ESmodel.ttypes.TQueryModel.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'csvParameter', (ESmodel.ttypes.CSVParameter, ESmodel.ttypes.CSVParameter.thrift_spec), None, ), # 2
  )

  def __init__(self, model=None, csvParameter=None,):
    self.model = model
    self.csvParameter = csvParameter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.model = ESmodel.ttypes.TQueryModel()
          self.model.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.csvParameter = ESmodel.ttypes.CSVParameter()
          self.csvParameter.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryReport2CSV_args')
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRUCT, 1)
      self.model.write(oprot)
      oprot.writeFieldEnd()
    if self.csvParameter is not None:
      oprot.writeFieldBegin('csvParameter', TType.STRUCT, 2)
      self.csvParameter.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.model)
    value = (value * 31) ^ hash(self.csvParameter)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryReport2CSV_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ESmodel.ttypes.TCSVResult, ESmodel.ttypes.TCSVResult.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ESmodel.ttypes.TCSVResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryReport2CSV_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDocNum_args:
  """
  Attributes:
   - indecies
   - types
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'indecies', (TType.STRING,None), None, ), # 1
    (2, TType.SET, 'types', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, indecies=None, types=None,):
    self.indecies = indecies
    self.types = types

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.indecies = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.indecies.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.types = set()
          (_etype9, _size6) = iprot.readSetBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.types.add(_elem11)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDocNum_args')
    if self.indecies is not None:
      oprot.writeFieldBegin('indecies', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.indecies))
      for iter12 in self.indecies:
        oprot.writeString(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.types is not None:
      oprot.writeFieldBegin('types', TType.SET, 2)
      oprot.writeSetBegin(TType.STRING, len(self.types))
      for iter13 in self.types:
        oprot.writeString(iter13)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.indecies)
    value = (value * 31) ^ hash(self.types)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDocNum_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDocNum_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryIndecies_args:
  """
  Attributes:
   - model
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'model', (ESmodel.ttypes.TQueryIndexModel, ESmodel.ttypes.TQueryIndexModel.thrift_spec), None, ), # 1
  )

  def __init__(self, model=None,):
    self.model = model

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.model = ESmodel.ttypes.TQueryIndexModel()
          self.model.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryIndecies_args')
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRUCT, 1)
      self.model.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.model)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryIndecies_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.success.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryIndecies_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter20 in self.success:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getFieldMetaDataByUserIdAndType_args:
  """
  Attributes:
   - userId
   - types
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userId', None, None, ), # 1
    (2, TType.SET, 'types', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, userId=None, types=None,):
    self.userId = userId
    self.types = types

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.types = set()
          (_etype24, _size21) = iprot.readSetBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString();
            self.types.add(_elem26)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getFieldMetaDataByUserIdAndType_args')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 1)
      oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    if self.types is not None:
      oprot.writeFieldBegin('types', TType.SET, 2)
      oprot.writeSetBegin(TType.STRING, len(self.types))
      for iter27 in self.types:
        oprot.writeString(iter27)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.types)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getFieldMetaDataByUserIdAndType_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(ESmodel.ttypes.TMappingMetaModel, ESmodel.ttypes.TMappingMetaModel.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = ESmodel.ttypes.TMappingMetaModel()
            _elem33.read(iprot)
            self.success.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getFieldMetaDataByUserIdAndType_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter34 in self.success:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getFieldMetaDataByIndeciesAndType_args:
  """
  Attributes:
   - indecies
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'indecies', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
  )

  def __init__(self, indecies=None, type=None,):
    self.indecies = indecies
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.indecies = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readString();
            self.indecies.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getFieldMetaDataByIndeciesAndType_args')
    if self.indecies is not None:
      oprot.writeFieldBegin('indecies', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.indecies))
      for iter41 in self.indecies:
        oprot.writeString(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 2)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.indecies)
    value = (value * 31) ^ hash(self.type)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getFieldMetaDataByIndeciesAndType_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(ESmodel.ttypes.TMappingMetaModel, ESmodel.ttypes.TMappingMetaModel.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = ESmodel.ttypes.TMappingMetaModel()
            _elem47.read(iprot)
            self.success.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getFieldMetaDataByIndeciesAndType_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter48 in self.success:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getIndexNames_args:
  """
  Attributes:
   - a_from
   - a_to
   - userId
   - database
   - isProcessTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'a_from', None, None, ), # 1
    (2, TType.I64, 'a_to', None, None, ), # 2
    (3, TType.STRING, 'userId', None, None, ), # 3
    (4, TType.STRING, 'database', None, None, ), # 4
    (5, TType.BOOL, 'isProcessTime', None, None, ), # 5
  )

  def __init__(self, a_from=None, a_to=None, userId=None, database=None, isProcessTime=None,):
    self.a_from = a_from
    self.a_to = a_to
    self.userId = userId
    self.database = database
    self.isProcessTime = isProcessTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.a_from = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.a_to = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.userId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.database = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.isProcessTime = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getIndexNames_args')
    if self.a_from is not None:
      oprot.writeFieldBegin('a_from', TType.I64, 1)
      oprot.writeI64(self.a_from)
      oprot.writeFieldEnd()
    if self.a_to is not None:
      oprot.writeFieldBegin('a_to', TType.I64, 2)
      oprot.writeI64(self.a_to)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 3)
      oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    if self.database is not None:
      oprot.writeFieldBegin('database', TType.STRING, 4)
      oprot.writeString(self.database)
      oprot.writeFieldEnd()
    if self.isProcessTime is not None:
      oprot.writeFieldBegin('isProcessTime', TType.BOOL, 5)
      oprot.writeBool(self.isProcessTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.a_from)
    value = (value * 31) ^ hash(self.a_to)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.database)
    value = (value * 31) ^ hash(self.isProcessTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getIndexNames_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readString();
            self.success.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getIndexNames_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter55 in self.success:
        oprot.writeString(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryByDelete_args:
  """
  Attributes:
   - model
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'model', (ESmodel.ttypes.TQueryModel, ESmodel.ttypes.TQueryModel.thrift_spec), None, ), # 1
  )

  def __init__(self, model=None,):
    self.model = model

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.model = ESmodel.ttypes.TQueryModel()
          self.model.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryByDelete_args')
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRUCT, 1)
      self.model.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.model)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryByDelete_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ESmodel.ttypes.DELResult, ESmodel.ttypes.DELResult.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ESmodel.ttypes.DELResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryByDelete_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class scanData_args:
  """
  Attributes:
   - queryModel
   - scanModel
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'queryModel', (ESmodel.ttypes.TQueryModel, ESmodel.ttypes.TQueryModel.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'scanModel', (ESmodel.ttypes.TScanModel, ESmodel.ttypes.TScanModel.thrift_spec), None, ), # 2
  )

  def __init__(self, queryModel=None, scanModel=None,):
    self.queryModel = queryModel
    self.scanModel = scanModel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.queryModel = ESmodel.ttypes.TQueryModel()
          self.queryModel.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.scanModel = ESmodel.ttypes.TScanModel()
          self.scanModel.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('scanData_args')
    if self.queryModel is not None:
      oprot.writeFieldBegin('queryModel', TType.STRUCT, 1)
      self.queryModel.write(oprot)
      oprot.writeFieldEnd()
    if self.scanModel is not None:
      oprot.writeFieldBegin('scanModel', TType.STRUCT, 2)
      self.scanModel.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.queryModel)
    value = (value * 31) ^ hash(self.scanModel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class scanData_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ESmodel.ttypes.ScanResult, ESmodel.ttypes.ScanResult.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ESmodel.ttypes.ScanResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('scanData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class fieldStat_args:
  """
  Attributes:
   - model
   - field
   - type
   - top
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'model', (ESmodel.ttypes.TQueryModel, ESmodel.ttypes.TQueryModel.thrift_spec), None, ), # 1
    (2, TType.STRING, 'field', None, None, ), # 2
    (3, TType.STRING, 'type', None, None, ), # 3
    (4, TType.I32, 'top', None, None, ), # 4
  )

  def __init__(self, model=None, field=None, type=None, top=None,):
    self.model = model
    self.field = field
    self.type = type
    self.top = top

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.model = ESmodel.ttypes.TQueryModel()
          self.model.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.field = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.top = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('fieldStat_args')
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRUCT, 1)
      self.model.write(oprot)
      oprot.writeFieldEnd()
    if self.field is not None:
      oprot.writeFieldBegin('field', TType.STRING, 2)
      oprot.writeString(self.field)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 3)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.top is not None:
      oprot.writeFieldBegin('top', TType.I32, 4)
      oprot.writeI32(self.top)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.model)
    value = (value * 31) ^ hash(self.field)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.top)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class fieldStat_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ESmodel.ttypes.FieldStatResult, ESmodel.ttypes.FieldStatResult.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ESmodel.ttypes.FieldStatResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('fieldStat_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryType_args:
  """
  Attributes:
   - userId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userId', None, None, ), # 1
  )

  def __init__(self, userId=None,):
    self.userId = userId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryType_args')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 1)
      oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryType_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.SET, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.SET:
          self.success = set()
          (_etype59, _size56) = iprot.readSetBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readString();
            self.success.add(_elem61)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryType_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.SET, 0)
      oprot.writeSetBegin(TType.STRING, len(self.success))
      for iter62 in self.success:
        oprot.writeString(iter62)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryByUpdate_args:
  """
  Attributes:
   - queryModel
   - updateModel
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'queryModel', (ESmodel.ttypes.TQueryModel, ESmodel.ttypes.TQueryModel.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'updateModel', (ESmodel.ttypes.TUpdateModel, ESmodel.ttypes.TUpdateModel.thrift_spec), None, ), # 2
  )

  def __init__(self, queryModel=None, updateModel=None,):
    self.queryModel = queryModel
    self.updateModel = updateModel

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.queryModel = ESmodel.ttypes.TQueryModel()
          self.queryModel.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.updateModel = ESmodel.ttypes.TUpdateModel()
          self.updateModel.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryByUpdate_args')
    if self.queryModel is not None:
      oprot.writeFieldBegin('queryModel', TType.STRUCT, 1)
      self.queryModel.write(oprot)
      oprot.writeFieldEnd()
    if self.updateModel is not None:
      oprot.writeFieldBegin('updateModel', TType.STRUCT, 2)
      self.updateModel.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.queryModel)
    value = (value * 31) ^ hash(self.updateModel)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryByUpdate_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ESmodel.ttypes.UpdateResult, ESmodel.ttypes.UpdateResult.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ESmodel.ttypes.UpdateResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryByUpdate_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
