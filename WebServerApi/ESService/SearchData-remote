#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from ESService import SearchData
from ESService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  TResultModel query(TQueryModel model)')
  print('  TCSVResult query2CSV(TQueryModel model, CSVParameter csvParameter)')
  print('  TResultTable queryReport(TQueryModel model)')
  print('  TCSVResult queryReport2CSV(TQueryModel model, CSVParameter csvParameter)')
  print('  i64 getDocNum( indecies,  types)')
  print('   queryIndecies(TQueryIndexModel model)')
  print('   getFieldMetaDataByUserIdAndType(string userId,  types)')
  print('   getFieldMetaDataByIndeciesAndType( indecies, string type)')
  print('   getIndexNames(i64 a_from, i64 a_to, string userId, string database, bool isProcessTime)')
  print('  DELResult queryByDelete(TQueryModel model)')
  print('  ScanResult scanData(TQueryModel queryModel, TScanModel scanModel)')
  print('  FieldStatResult fieldStat(TQueryModel model, string field, string type, i32 top)')
  print('   queryType(string userId)')
  print('  UpdateResult queryByUpdate(TQueryModel queryModel, TUpdateModel updateModel)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = SearchData.Client(protocol)
transport.open()

if cmd == 'query':
  if len(args) != 1:
    print('query requires 1 args')
    sys.exit(1)
  pp.pprint(client.query(eval(args[0]),))

elif cmd == 'query2CSV':
  if len(args) != 2:
    print('query2CSV requires 2 args')
    sys.exit(1)
  pp.pprint(client.query2CSV(eval(args[0]),eval(args[1]),))

elif cmd == 'queryReport':
  if len(args) != 1:
    print('queryReport requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryReport(eval(args[0]),))

elif cmd == 'queryReport2CSV':
  if len(args) != 2:
    print('queryReport2CSV requires 2 args')
    sys.exit(1)
  pp.pprint(client.queryReport2CSV(eval(args[0]),eval(args[1]),))

elif cmd == 'getDocNum':
  if len(args) != 2:
    print('getDocNum requires 2 args')
    sys.exit(1)
  pp.pprint(client.getDocNum(eval(args[0]),eval(args[1]),))

elif cmd == 'queryIndecies':
  if len(args) != 1:
    print('queryIndecies requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryIndecies(eval(args[0]),))

elif cmd == 'getFieldMetaDataByUserIdAndType':
  if len(args) != 2:
    print('getFieldMetaDataByUserIdAndType requires 2 args')
    sys.exit(1)
  pp.pprint(client.getFieldMetaDataByUserIdAndType(args[0],eval(args[1]),))

elif cmd == 'getFieldMetaDataByIndeciesAndType':
  if len(args) != 2:
    print('getFieldMetaDataByIndeciesAndType requires 2 args')
    sys.exit(1)
  pp.pprint(client.getFieldMetaDataByIndeciesAndType(eval(args[0]),args[1],))

elif cmd == 'getIndexNames':
  if len(args) != 5:
    print('getIndexNames requires 5 args')
    sys.exit(1)
  pp.pprint(client.getIndexNames(eval(args[0]),eval(args[1]),args[2],args[3],eval(args[4]),))

elif cmd == 'queryByDelete':
  if len(args) != 1:
    print('queryByDelete requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryByDelete(eval(args[0]),))

elif cmd == 'scanData':
  if len(args) != 2:
    print('scanData requires 2 args')
    sys.exit(1)
  pp.pprint(client.scanData(eval(args[0]),eval(args[1]),))

elif cmd == 'fieldStat':
  if len(args) != 4:
    print('fieldStat requires 4 args')
    sys.exit(1)
  pp.pprint(client.fieldStat(eval(args[0]),args[1],args[2],eval(args[3]),))

elif cmd == 'queryType':
  if len(args) != 1:
    print('queryType requires 1 args')
    sys.exit(1)
  pp.pprint(client.queryType(args[0],))

elif cmd == 'queryByUpdate':
  if len(args) != 2:
    print('queryByUpdate requires 2 args')
    sys.exit(1)
  pp.pprint(client.queryByUpdate(eval(args[0]),eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
