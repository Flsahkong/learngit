#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def queryStorePreDay(self, startTime, endTime):
    """
    Parameters:
     - startTime
     - endTime
    """
    pass

  def queryStorePreDayByUserid(self, startTime, endTime, userid):
    """
    Parameters:
     - startTime
     - endTime
     - userid
    """
    pass

  def queryEventCountPreDay(self, startTime, endTime):
    """
    Parameters:
     - startTime
     - endTime
    """
    pass

  def queryEventCountPreDayByProcessTime(self, startTime, endTime):
    """
    Parameters:
     - startTime
     - endTime
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def queryStorePreDay(self, startTime, endTime):
    """
    Parameters:
     - startTime
     - endTime
    """
    self.send_queryStorePreDay(startTime, endTime)
    return self.recv_queryStorePreDay()

  def send_queryStorePreDay(self, startTime, endTime):
    self._oprot.writeMessageBegin('queryStorePreDay', TMessageType.CALL, self._seqid)
    args = queryStorePreDay_args()
    args.startTime = startTime
    args.endTime = endTime
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStorePreDay(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryStorePreDay_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStorePreDay failed: unknown result");

  def queryStorePreDayByUserid(self, startTime, endTime, userid):
    """
    Parameters:
     - startTime
     - endTime
     - userid
    """
    self.send_queryStorePreDayByUserid(startTime, endTime, userid)
    return self.recv_queryStorePreDayByUserid()

  def send_queryStorePreDayByUserid(self, startTime, endTime, userid):
    self._oprot.writeMessageBegin('queryStorePreDayByUserid', TMessageType.CALL, self._seqid)
    args = queryStorePreDayByUserid_args()
    args.startTime = startTime
    args.endTime = endTime
    args.userid = userid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStorePreDayByUserid(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryStorePreDayByUserid_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStorePreDayByUserid failed: unknown result");

  def queryEventCountPreDay(self, startTime, endTime):
    """
    Parameters:
     - startTime
     - endTime
    """
    self.send_queryEventCountPreDay(startTime, endTime)
    return self.recv_queryEventCountPreDay()

  def send_queryEventCountPreDay(self, startTime, endTime):
    self._oprot.writeMessageBegin('queryEventCountPreDay', TMessageType.CALL, self._seqid)
    args = queryEventCountPreDay_args()
    args.startTime = startTime
    args.endTime = endTime
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryEventCountPreDay(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryEventCountPreDay_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryEventCountPreDay failed: unknown result");

  def queryEventCountPreDayByProcessTime(self, startTime, endTime):
    """
    Parameters:
     - startTime
     - endTime
    """
    self.send_queryEventCountPreDayByProcessTime(startTime, endTime)
    return self.recv_queryEventCountPreDayByProcessTime()

  def send_queryEventCountPreDayByProcessTime(self, startTime, endTime):
    self._oprot.writeMessageBegin('queryEventCountPreDayByProcessTime', TMessageType.CALL, self._seqid)
    args = queryEventCountPreDayByProcessTime_args()
    args.startTime = startTime
    args.endTime = endTime
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryEventCountPreDayByProcessTime(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = queryEventCountPreDayByProcessTime_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.RException is not None:
      raise result.RException
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryEventCountPreDayByProcessTime failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["queryStorePreDay"] = Processor.process_queryStorePreDay
    self._processMap["queryStorePreDayByUserid"] = Processor.process_queryStorePreDayByUserid
    self._processMap["queryEventCountPreDay"] = Processor.process_queryEventCountPreDay
    self._processMap["queryEventCountPreDayByProcessTime"] = Processor.process_queryEventCountPreDayByProcessTime

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_queryStorePreDay(self, seqid, iprot, oprot):
    args = queryStorePreDay_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStorePreDay_result()
    try:
      result.success = self._handler.queryStorePreDay(args.startTime, args.endTime)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("queryStorePreDay", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryStorePreDayByUserid(self, seqid, iprot, oprot):
    args = queryStorePreDayByUserid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStorePreDayByUserid_result()
    try:
      result.success = self._handler.queryStorePreDayByUserid(args.startTime, args.endTime, args.userid)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("queryStorePreDayByUserid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryEventCountPreDay(self, seqid, iprot, oprot):
    args = queryEventCountPreDay_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryEventCountPreDay_result()
    try:
      result.success = self._handler.queryEventCountPreDay(args.startTime, args.endTime)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("queryEventCountPreDay", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryEventCountPreDayByProcessTime(self, seqid, iprot, oprot):
    args = queryEventCountPreDayByProcessTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryEventCountPreDayByProcessTime_result()
    try:
      result.success = self._handler.queryEventCountPreDayByProcessTime(args.startTime, args.endTime)
    except Exception.ttypes.RException, RException:
      result.RException = RException
    oprot.writeMessageBegin("queryEventCountPreDayByProcessTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class queryStorePreDay_args:
  """
  Attributes:
   - startTime
   - endTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'startTime', None, None, ), # 1
    (2, TType.I64, 'endTime', None, None, ), # 2
  )

  def __init__(self, startTime=None, endTime=None,):
    self.startTime = startTime
    self.endTime = endTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.startTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.endTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStorePreDay_args')
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 1)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 2)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStorePreDay_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStorePreDay_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStorePreDayByUserid_args:
  """
  Attributes:
   - startTime
   - endTime
   - userid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'startTime', None, None, ), # 1
    (2, TType.I64, 'endTime', None, None, ), # 2
    (3, TType.STRING, 'userid', None, None, ), # 3
  )

  def __init__(self, startTime=None, endTime=None, userid=None,):
    self.startTime = startTime
    self.endTime = endTime
    self.userid = userid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.startTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.endTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.userid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStorePreDayByUserid_args')
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 1)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 2)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 3)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    value = (value * 31) ^ hash(self.userid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStorePreDayByUserid_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStorePreDayByUserid_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryEventCountPreDay_args:
  """
  Attributes:
   - startTime
   - endTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'startTime', None, None, ), # 1
    (2, TType.I64, 'endTime', None, None, ), # 2
  )

  def __init__(self, startTime=None, endTime=None,):
    self.startTime = startTime
    self.endTime = endTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.startTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.endTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryEventCountPreDay_args')
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 1)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 2)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryEventCountPreDay_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryEventCountPreDay_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryEventCountPreDayByProcessTime_args:
  """
  Attributes:
   - startTime
   - endTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'startTime', None, None, ), # 1
    (2, TType.I64, 'endTime', None, None, ), # 2
  )

  def __init__(self, startTime=None, endTime=None,):
    self.startTime = startTime
    self.endTime = endTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.startTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.endTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryEventCountPreDayByProcessTime_args')
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 1)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.endTime is not None:
      oprot.writeFieldBegin('endTime', TType.I64, 2)
      oprot.writeI64(self.endTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.startTime)
    value = (value * 31) ^ hash(self.endTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryEventCountPreDayByProcessTime_result:
  """
  Attributes:
   - success
   - RException
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'RException', (Exception.ttypes.RException, Exception.ttypes.RException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, RException=None,):
    self.success = success
    self.RException = RException

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.RException = Exception.ttypes.RException()
          self.RException.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryEventCountPreDayByProcessTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.RException is not None:
      oprot.writeFieldBegin('RException', TType.STRUCT, 1)
      self.RException.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.RException)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
